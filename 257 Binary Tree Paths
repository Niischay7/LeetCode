/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void dfs(TreeNode* root,string path,vector<string>& ans){
        if(root == nullptr){
            // ans.push_back(temp);
            return;
        }
        string data = to_string(root->val);
        if(!path.empty()){
            path += "->";
        }
        path += data;
        // path.push_back(root->val);
        if(root->left == nullptr && root->right == nullptr){
            ans.push_back(path);
            return;
        }
        else{
            dfs(root->left,path,ans);
            dfs(root->right,path,ans);
        }
        // path.pop_back();
    }
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> ans;
        if(root == nullptr) return ans;
        // string path = "";
        dfs(root, "" ,ans);
        return ans;
    }
};
