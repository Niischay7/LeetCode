class Solution {

    vector<vector<int>> fnc(vector<vector<int>>& mat,vector<vector<int>>&dp){
        int n = mat.size();
        int m = mat[0].size();
        queue<pair<int,int>> q;

        for(int i = 0; i < n;i++){
            for(int j = 0; j < m ; j++){
                if(mat[i][j] == 0){
                    dp[i][j] = 0;
                    q.push({i,j});
                }
            }
        }

        vector<int> dx = {1,-1,0,0};
        vector<int> dy = {0,0,1,-1};

        while(!q.empty()){
            auto [x,y] = q.front();
            q.pop();

            for(int k = 0; k < 4;k++){
                int nx = x + dx[k];
                int ny = y + dy[k];

                if(nx >= 0 && nx < n && ny >= 0 && ny < m){
                    if(dp[nx][ny] > dp[x][y] + 1){
                        dp[nx][ny] = dp[x][y] + 1;
                        q.push({nx,ny});
                    }
                } 
            }
        }
        return dp;
    }
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<int>> dp(n,vector<int> (m,INT_MAX));
        return fnc(mat,dp);
    }
};
