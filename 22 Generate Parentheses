class Solution {
    void fnc(int n , string curr,int open , int close, vector<string>& ans){
        if (curr.size() == 2*n){
            // int cnt1 = 0;
            // int cnt2 = 0;
            // for(int i = 0;i < 2*n;i++){
            //     if(curr[i] == '(') cnt1++;
            //     else cnt2++;
            // }
            // if(cnt1 == cnt2) 
            ans.push_back(curr);
            // else curr.clear();
            return;
        }
        if(open < n){
            fnc(n,curr + '(',open + 1,close,ans);
        }
        if(close < open){
            fnc(n,curr + ')',open,close + 1,ans);
        }
    }
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        fnc(n,"",0,0,ans);
        return ans;
        // int cnt1 = 0;
        // int cnt2 = 0;
        // vector<string> res;
        // for(int i = 0; i < n;i++){

        // }
    }
};
