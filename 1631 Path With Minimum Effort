class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        priority_queue<pair<int, pair<int, int>>,vector<pair<int, pair<int, int>>>,greater<pair<int, pair<int, int>>>> pq;

        int n = heights.size();
        int m = heights[0].size();

        vector<vector<int>>dp(n,vector<int>(m,1e9));
        dp[0][0] = 0;
        pq.push({0,{0,0}});

        int dr[] = {0,0,1,-1};
        int dc[] = {1,-1,0,0};

        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            int diff = it.first;
            int r = it.second.first;
            int c = it.second.second;

            if(r == n - 1 && c == m - 1) return dp[n-1][m-1];
            // int r = 0;
            // int c = 0;
            for(int i = 0; i < 4;i++){
                int nr = r + dr[i];
                int nc = c + dc[i];

                if(nr >= 0 && nc >= 0 && nr < n && nc < m){
                    int effort = max(abs(heights[r][c] - heights[nr][nc]),diff);
                    if(effort < dp[nr][nc]){
                        dp[nr][nc] = effort;
                        pq.push({effort,{nr,nc}});
                    }
                }
            }
        }
        return 0;
    }
};
