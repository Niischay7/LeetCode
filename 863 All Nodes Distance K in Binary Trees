/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    void search(TreeNode* root, unordered_map<TreeNode* , TreeNode*>& parent){
        queue<TreeNode*> q;
        q.push(root);
        // q.pop();
        while(!q.empty()){
            TreeNode* curr = q.front();
            q.pop();
            if(curr ->left){
                parent[curr->left] = curr;
                q.push(curr->left);
            }
            if(curr->right){
                parent[curr->right] = curr;
                q.push(curr->right);
            }
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode* , TreeNode*> parent;
        search(root,parent);

        unordered_set<TreeNode*> vis;
        queue<pair<TreeNode*,int>> q;
        q.push({target,0});
        vis.insert(target);

        vector<int> ans;

        while(!q.empty()){
            auto[curr,dist] = q.front();
            q.pop();
            if(dist == k){
                ans.push_back(curr->val);
            }
            if(dist > k) break;

            for(TreeNode* neigh : {curr->left,curr->right,parent[curr]}){
                if(neigh && !vis.count(neigh)){
                    vis.insert(neigh);
                    q.push({neigh,dist + 1});
                }
            }
        }
        return ans;
    }
};
