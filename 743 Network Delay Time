class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> adj(n+1);
        int ans = 0;
        for(auto e : times){
            int u = e[0];
            int v = e[1];
            int w = e[2];
            adj[u].push_back({v,w});
        }
        if(adj[k].empty()) return -1;

        vector<int> dist(n+1,INT_MAX);
        dist[k] = 0;

        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        pq.push({0,k});

        while(!pq.empty()){
            auto [d,node] = pq.top();
            pq.pop();
            if(d > dist[node]) continue;
            for(auto ed : adj[node]){
                int neighbor = ed.first;
                int weight = ed.second;

                if(dist[neighbor] > d + weight){
                    dist[neighbor] = d + weight;
                    pq.push({dist[neighbor],neighbor});
                }
            }
        }

        for(int i = 1; i <= n;i++){
            if(dist[i] == INT_MAX) return -1;
            ans = max(ans,dist[i]);
        }
        return ans;
    }
};
