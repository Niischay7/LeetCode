class Solution {

    void dfs(int node, vector<vector<int>>& adj, vector<bool>&vis){
        vis[node] = true;
        for(auto p : adj[node]){
            if(!vis[p]){
                dfs(p,adj,vis);
            }
        }
    }
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        int k = connections.size();
        if(k < n - 1) return -1;

        vector<vector<int>> adj(n);

        for(auto it : connections){
            int u = it[0];
            int v = it[1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<bool> vis(n,false);

        int cnt = 0;
        for(int i = 0; i < n;i++){
            if(!vis[i]){
                cnt++;
                dfs(i,adj,vis);
            }
        }
        return cnt - 1;
    }
};
