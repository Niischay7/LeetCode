/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<TreeNode*,TreeNode*> parent;
        TreeNode* startNode = nullptr;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            TreeNode* curr = q.front();
            q.pop();
            if(curr->val == start) startNode = curr;
            if(curr->left){
                parent[curr->left] = curr;
                q.push(curr->left);
            }
            if(curr->right){
                parent[curr->right] = curr;
                q.push(curr->right);
            }
        }

        unordered_set<TreeNode*> vis;
        queue<TreeNode*> bfs;
        bfs.push(startNode);
        vis.insert(startNode);
        int time =  -1;
        while(!bfs.empty()){
            int sz = bfs.size();
            time++;
            for(int i = 0;i < sz ;i++){
                TreeNode* node = bfs.front();
                bfs.pop();
                if(node->left && !vis.count(node->left)){
                    vis.insert(node->left);
                    bfs.push(node->left);
                }
                if(node->right && !vis.count(node->right)){
                    vis.insert(node->right);
                    bfs.push(node->right);
                }
                if(parent.count(node) && !vis.count(parent[node])){
                    vis.insert(parent[node]);
                    bfs.push(parent[node]);
                }
            }
        }
        return time;
    }
};
